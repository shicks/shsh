Alias Expansion
===============


Alias expansion is pretty tricky.  Here are some test cases.

~~~~ check-output/alias1.sh
# fails-in-bash
alias foo=echo\ hello
alias bar=world
foo bar          # "hello bar"
alias foo="echo hello "
foo bar          # "hello world"
alias foo='echo "hello '
foo bar"         # "hello  bar"
alias foo="echo 'hello "
foo bar'         # "hello  bar"

alias foo=bar
alias bar=echo
foo bar          # "bar"
alias foo="bar "
foo bar          # "echo"
alias foo=bar
alias bar="echo "
foo bar          # "echo"

alias foo="echo \\"
foo bar          # dash: " bar", bash: "  bar" (?)

alias foo="echo hello #"
foo bar          # "hello"

unset A
alias foo=\${A:-
bar foo test}    # "test" (no prespace, either!)

alias foo=echo
A=1 foo bar      # "bar"  (variable settings don't unset aliases)

# Nested expansions
alias foo='bar baz '
alias bar='echo '
alias baz='foo'
foo bar          # "foo echo"
foo foo          # "foo echo foo"

~~~~

~~~~ known-output/alias1.sh
hello bar
hello world
hello  bar
hello  bar
bar
echo
echo
 bar
hello
test
bar
foo echo
foo echo foo
~~~~

~~~~ check-output/failing-alias2.sh
# fails-in-bash
alias foo='echo ` '
alias bar=echo
foo bar baz`     # "baz"  (some modes still expand second alias...)

alias foo='$(('
alias bar='echo '
bar foo 1+2 ))   # "3" (!)
~~~~

~~~~ known-output/failing-alias2.sh
baz
3
~~~~


Plan
----

The plan for implementing this is to make a stateful lexer,
of the same type we had before,
  runLexer :: String -> [(String,String)] -> [Token]
where Token = Word [Lexeme] | ... as before, but now we can
just have the Lexer push/pop the state and loop.  The state
must include
  * Parsing mode (normal, dquotes, paramexp, arith, command,
    backticks, ...?)
  * Aliases allowed?
  * Current word.
Additionally, we must use a lookAhead approach to delimit
words.  That is, when the current word is nonempty, we peek
at the next character and if it's an operator, etc, then we
do the delimiting action, which includes
  * alias expansion (recursively, updating state at space),
  * changing the type to IONum.

The parsing mode can be as simple as a stack, with a list
of Lexer ()'s.  On EOF, we can pop the final mode, and this
will give the signal to quit.
