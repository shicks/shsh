Redirecting output of compound commands
=======================================

Here are some test cases involving redirection of output.

~~~~ check-output/redir-simple.sh
mkdir tmp
cd tmp

cat <<EOF >foo
baz
foo
bar
EOF

sort <foo

cat <<EOF >>foo
dog
EOF

sort <foo
~~~~

~~~~ known-output/redir-simple.sh
bar
baz
foo
bar
baz
dog
foo
~~~~

This is tricky - it's possible to have multiple heredocs even without
funny business with file descriptors:

~~~~ check-output/redir-double-heredoc.sh
# fails-in-bash
$(cat <<EOF) <<EOF
cat
EOF
foo
EOF
~~~~

~~~~ known-output/redir-double-heredoc.sh
foo
~~~~

Redirects need to work even when we don't have commands.
~~~~ check-output/redir-empty-command.sh
set -e
! mkdir tmp 2>/dev/null
cd tmp
> foo
test -e foo
test ! -s foo
~~~~

~~~~ known-output/redir-empty-command.sh
~~~~

Redirecting function output is tricky because functions get their
own redirects that go with them, and these need to be applied in
the right order.

~~~~ check-output/redir-function.sh
announce () { "$@" && echo it works || echo it failed; }

announce echo foo bar > out

echo checking out out
cat out
echo grepping from out
grep works out
grep 'foo bar' out
~~~~

~~~~ known-output/redir-function.sh
checking out out
foo bar
it works
grepping from out
it works
foo bar
~~~~

Here we check the order:

~~~~ check-output/redir-function2.sh
foo () { echo foo; } > foo
foo > bar
test -e bar && test ! -s bar && echo bar empty
echo foo > foo.cmp
cmp foo foo.cmp && echo foo says foo
~~~~

~~~~ known-output/redir-function2.sh
bar empty
foo says foo
~~~~
